# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go go smartctl_exporter

on:
  push:
    tags:
      - 'v*'


jobs:

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [amd64, 386, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p build/${{ matrix.os }}_${{ matrix.arch }}
          go build -o build/${{ matrix.os }}_${{ matrix.arch }}/smartctl_exporter

      - name: Package binary
        run: |
          cd build/${{ matrix.os }}_${{ matrix.arch }}
          tar -czf ../smartctl_exporter-${{ VERSION }}.${{ matrix.os }}-${{ matrix.arch }}.tar.gz smartctl_exporter
          cd ../..

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: build/*.tar.gz

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: binaries
          path: build

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Binary Assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in build/*.tar.gz; do
            name=$(basename "$file")
            echo "Uploading $name..."
            curl -s --data-binary @"$file" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/gzip" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$name"
          done

      - name: Create Source Code Archive
        run: |
          git archive --format tar.gz -o source_code_${{ github.ref_name }}.tar.gz HEAD

      - name: Upload Source Code to Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s --data-binary @source_code_${{ github.ref_name }}.tar.gz \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/gzip" \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=source_code_${{ github.ref_name }}.tar.gz"
